(venv) D:\moduleD2_homework\Mac>python manage.py shell
Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from rest.models import Product
>>> cap = Product(name = "Капучино 0.3", price = 99.0)
>>> cap.save()
>>> cap_big = Product.objects.create(name = "Капучино 0.3", price = 109.0)
>>> from rest.models import Staff
(venv) D:\moduleD2_homework\Mac>python manage.py shell
Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from rest.models import Staff
(venv) D:\moduleD2_homework\Mac>python manage.py shell
Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from rest.models import Staff
>>> cashier1 = Staff.objects.create(full_name = "Иванов Иван Иванович", position = Staff.cashier, labor_contract = 1754)
>>> cashier2 = Staff.objects.create(full_name = "Петров Петр Петрович", position = Staff.cashier, labor_contract = 4355)
>>> direct = Staff.objects.create(full_name = "Максимов Максим Максимович", position = Staff.director, labor_contract = 1254)
>>> person = Staff.objects.get(labor_contract = 1254)
>>> print(person)
Staff object (3)
>>> print(person.full_name)
Максимов Максим Максимович
>>> print(person.position)
DI
>>> print(person.get_position_display())
Директор
>>> exit()

(venv) D:\moduleD2_homework\NewsPaper>python manage.py shell
Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from news.models import *
>>> user1 = User.objects.create(username='Nik', first_name='Rad')
>>> Author.objects.create(author=user1)
<Author: Author object (1)>
>>> user2 = User.objects.create(username='Biear', first_name='Grials')
>>> Author.objects.create(author=user2)
<Author: Author object (2)>
>>> Category.objects.create(name='IT')
<Category: Category object (1)>
>>> Category.objects.create(name='Ecology')
<Category: Category object (2)>
>>> Category.objects.create(name='Space')
<Category: Category object (3)>
>>>> Category.objects.create(name='Robotics')
<Category: Category object (4)>
>>> Post.objects.create(author=Author.objects.get(author=User.objects.get(username='Nik')))
<Post: Post object (1)>
>>> Post.objects.create(author=Author.objects.get(author=User.objects.get(username='Nik')), category_Type='NW', title='Hot News', text='Brai "wait for it, wait for it" kin news')
<Post: Post object (2)>
>>> Post.objects.create(author=Author.objects.get(author=User.objects.get(username='Nik')), category_Type='NW', title='Cold News  ', text='Go to the MALL')
<Post: Post object (3)>
>>>
>>> Post.objects.filter(author = Author.objects.get(author = User.objects.get(username = 'Nik')))
<QuerySet [<Post: Post object (1)>, <Post: Post object (2)>, <Post: Post object (3)>]>
>>> nik_Posts = Post.objects.filter(author = Author.objects.get(author = User.objects.get(username = 'Nik')))
>>> nik_Posts.values('author', 'category_Type', 'post_Category', 'title', 'text')
<QuerySet [{'author': 1, 'category_Type': 'AR', 'post_Category': None, 'title': '', 'text': ''}, {'author': 1, 'category_Type': 'NW', 'post_Category': None, 'title': 'Hot News', 'text': 'Brai "wait for it, wait for it" kin news'}, {'author': 1, 'category_Type': 'NW', 'post_Category': None, 'title': 'Cold News  ', 'text': 'Go to the MALL'}]>
>>> nik_Posts1 = Post.objects.get(title = 'Hot News')
>>> nik_Cat1 = Category.objects.get(name='IT')
>>> nik_Cat2 = Category.objects.get(name='Robotics')
>>> print(nik_Cat1.name)
IT
>>> nik_Posts1 = Post.objects.get(title = 'Hot News')
>>> nik_Posts1 = Post.objects.get(title = 'Hot News')
>>> nik_Posts1.title
'Hot News'
>>> nik_Posts1.category_Type
'NW'
>>> nik_Posts1.author
<Author: Author object (1)>
>>> Post.objects.create(author = Author.objects.get(author = User.objects.get(username='Nik')), category_Type='AR', title='Mashine War', text='hahaha catcha')
<Post: Post object (4)>
>>> Post.objects.create(author = Author.objects.get(author = User.objects.get(username='Biear')), category_Type='AR', title='Oil trash', text='Oil ompany on fire')
<Post: Post object (5)>
>>> Post.objects.create(author = Author.objects.get(author = User.objects.get(username='Biear')), category_Type='NW', title='Misha sleep', text='Masha wake up!!!!')
<Post: Post object (6)>
>>> Post.objects.create(author = Author.objects.get(author = User.objects.get(username='Biear')), category_Type='NW', title='Monkey on Moon', text='Rat toooo!')
<Post: Post object (7)>
>>> p1 = Post.objects.get(pk=1)
>>> p1.title
''
>>> p2 = Post.objects.get(pk=2)
>>> p3 = Post.objects.get(pk=3)
>>> p4 = Post.objects.get(pk=4)
>>> p5 = Post.objects.get(pk=5)
>>> p6 = Post.objects.get(pk=6)
>>> p7 = Post.objects.get(pk=7)
>>> p2.title
'Hot News'
>>> p3.title
'Cold News  '
>>> c1 = Category.objects.get(name='IT')
>>> c1.name
'IT'
>>> c2 = Category.objects.get(name='Ecology')
>>> c3 = Category.objects.get(name='Space')
>>> c4 = Category.objects.get(name='Robotis')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\moduleD2_homework\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\moduleD2_homework\venv\lib\site-packages\django\db\models\query.py", line 650, in get
    raise self.model.DoesNotExist(
news.models.Category.DoesNotExist: Category matching query does not exist.
>>> c4 = Category.objects.get(name='Robotics')
>>> p1.post_Category.add(c1)
>>> p2.post_Category.add(c2)
>>> p3.post_Category.add(c3, c2)
>>> p4.title
'Mashine War'
>>> p4.post_Category.add(c1, c4)
>>> p5.title
'Oil trash'
>>> p5.post_Category.add(c3, c2)
>>> p6.title
'Misha sleep'
>>> p6.post_Category.add(c3, c2)
>>> p7.title
'Monkey on Moon'
>>> p7.post_Category.add(c3, c2, c1, c4)
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=1), comment_User = User.objects.get(username='Nik'), text='comment text NIk')
<Comment: Comment object (1)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=2), comment_User = User.objects.get(username='Biars'), text='comment text Biears')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\moduleD2_homework\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\moduleD2_homework\venv\lib\site-packages\django\db\models\query.py", line 650, in get
    raise self.model.DoesNotExist(
django.contrib.auth.models.User.DoesNotExist: User matching query does not exist.
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=2), comment_User = User.objects.get(username='Biar'), text='comment text Biears')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "D:\moduleD2_homework\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\moduleD2_homework\venv\lib\site-packages\django\db\models\query.py", line 650, in get
    raise self.model.DoesNotExist(
django.contrib.auth.models.User.DoesNotExist: User matching query does not exist.
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=2), comment_User = User.objects.get(username='Biear'), text='comment text Biears')
<Comment: Comment object (2)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=3), comment_User = User.objects.get(username='Biear'), text='comment text Biears')
<Comment: Comment object (3)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=3), comment_User = User.objects.get(username='Nik'), text='comment text Biears to Nik')
<Comment: Comment object (4)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=4), comment_User = User.objects.get(username='Nik'), text='comment text NIk to Biear')
<Comment: Comment object (5)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=4), comment_User = User.objects.get(username='Biear'), text='comment text NIk to Biear')
<Comment: Comment object (6)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=5), comment_User = User.objects.get(username='Biear'), text='comment text NIk to Biear')
<Comment: Comment object (7)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=5), comment_User = User.objects.get(username='Nik'), text='comment text Biear to NIk')
<Comment: Comment object (8)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=6), comment_User = User.objects.get(username='Nik'), text='comment text Biear to NIk')
<Comment: Comment object (9)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=6), comment_User = User.objects.get(username='Biear'), text='comment text NIk to Biear')
<Comment: Comment object (10)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=7), comment_User = User.objects.get(username='Biear'), text='comment text NIk to Biear')
<Comment: Comment object (11)>
>>> Comment.objects.create(comment_Post= Post.objects.get(pk=7), comment_User = User.objects.get(username='Nik'), text='comment text Biear to NIk')
<Comment: Comment object (12)>
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).dislike()
>>> Post.objects.get(pk=1).dislike()
>>> Post.objects.get(pk=1).dislike()
>>> Post.objects.get(pk=2).dislike()
>>> Post.objects.get(pk=2).dislike()
>>> Post.objects.get(pk=2).dislike()
>>> Post.objects.get(pk=2).dislike()
>>> Post.objects.get(pk=2).dislike()
>>> Post.objects.get(pk=3).like()
>>> Post.objects.get(pk=3).like()
>>> Post.objects.get(pk=3).like()
>>> Post.objects.get(pk=3).like()
>>>
>>> Post.objects.get(pk=4).like()
>>> Post.objects.get(pk=4).like()
>>> Post.objects.get(pk=4).like()
>>> Post.objects.get(pk=5).like()
>>> Post.objects.get(pk=5).like()
>>> Post.objects.get(pk=5).dislike()
>>> Post.objects.get(pk=6).dislike()
>>> Post.objects.get(pk=7).like()
>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=1).dislike()
>>> Comment.objects.get(pk=2).dislike()
>>> Comment.objects.get(pk=3).like()
>>> Comment.objects.get(pk=3).like()
>>> Comment.objects.get(pk=4).like()
>>> Comment.objects.get(pk=4).dislike()
>>> Comment.objects.get(pk=5).like()
>>>
>>>
>>> Comment.objects.get(pk=5).like()
>>> Comment.objects.get(pk=5).like()
>>> Comment.objects.get(pk=5).like()
>>> Comment.objects.get(pk=6).like()
>>> Comment.objects.get(pk=7).like()
>>> Comment.objects.get(pk=7).like()
>>> Comment.objects.get(pk=7).dislike()
>>> Comment.objects.get(pk=8).dislike()
>>> Comment.objects.get(pk=8).dislike()
>>> Comment.objects.get(pk=8).dislike()
>>> Comment.objects.get(pk=8).dislike()
>>> Comment.objects.get(pk=9).dislike()
>>> Comment.objects.get(pk=10).like()
>>> Comment.objects.get(pk=11).like()
>>> Comment.objects.get(pk=11).like()
>>> Comment.objects.get(pk=12).like()
>>> Comment.objects.get(pk=12).like()
>>> Comment.objects.get(pk=12).like()



(venv) D:\moduleD2_homework\NewsPaper>python manage.py shell
Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from news.models import *
>>> Author.objects.get(author=User.objects.get(username='Nik')).update_rating()
>>> Author.objects.get(author=User.objects.get(username='Biear')).update_rating()
>>> a = Author.objects.get(author=User.objects.get(username='Biear'))
>>> a.ratingAuthor
0
>>> a.ratingAuthor
0
>>> a = Author.objects.get(author=User.objects.get(username='Nik'))
>>> a.ratingAuthor
0
>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=1).like()
>>>
>>> Comment.objects.get(pk=1).like()
>>> Author.objects.get(author=User.objects.get(username='Nik')).update_rating()
>>> a = Author.objects.get(author=User.objects.get(username='Nik'))
>>> a.ratingAuthor
0
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> a.ratingAuthor
0
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>>
>>>
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Author.objects.get(author=User.objects.get(username='Nik')).update_rating()
>>> a = Author.objects.get(author=User.objects.get(username='Nik'))
>>> a.ratingAuthor
0
>>> p = Post.objects.get(pk =1 )
>>> p.rating
26
>>> c = Comment.objects.get(pk=1)
>>> c.rating
7
>>> Author.objects.get(author=User.objects.get(username='Nik')).update_rating()
>>> Author.objects.get(author=User.objects.get(username='Nik')).update_rating()
>>> exit()

(venv) D:\moduleD2_homework\NewsPaper>python manage.py shell
Python 3.10.1 (tags/v3.10.1:2cd268a, Dec  6 2021, 19:10:37) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from news.models import *
>>> Author.objects.get(author=User.objects.get(username='Nik')).update_rating()
>>> a = Author.objects.get(author=User.objects.get(username='Nik'))
>>> a.ratingAuthor
93
>>> Author.objects.get(author=User.objects.get(username='Biear')).update_rating()
>>> a = Author.objects.get(author=User.objects.get(username='Biear'))
>>> a.ratingAuthor
9
>>> best = Author.objects.all().order_by('-ratingAuthor').values('author', 'ratingAuthor')[0]
>>> print(best)
{'author': 1, 'ratingAuthor': 93}
>>> best = Author.objects.all().order_by('-ratingAuthor').values('author', 'ratingAuthor')[0]
>>> print(best)
{'author': 1, 'ratingAuthor': 93}
>>> best = Author.objects.all().values('author')
>>> print(best)
<QuerySet [{'author': 1}, {'author': 2}]>
>>> print(best[0])
{'author': 1}
>>> print(best[0])
{'author': 1}
>>> print(best[1])
{'author': 2}
>>> print(best)
<QuerySet [{'author': 1}, {'author': 2}]>
>>> Author.objects.all().order_by('ratingAuthor').values('author', 'ratingAuthor')
<QuerySet [{'author': 2, 'ratingAuthor': 9}, {'author': 1, 'ratingAuthor': 93}]>
>>> Post.objects.all().order_by('rating').values('author', 'date_Creation', 'rating', 'title', 'text')
<QuerySet [{'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 9, 33, 595364, tzinfo=datetime.timezone.utc), 'rating': -5, 'title': 'Hot News', 'text': 'Brai "wait for it, wait for it" kin news'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 58, 474230, tzinfo=datetime.timezone.utc), 'rating': -1, 'title': 'Misha sleep', 'text': 'Masha wake up!!!!'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 14, 452861, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Oil trash', 'text': 'Oil ompany on fire'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 43, 0, 518466, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Monkey on Moon', 'text': 'Rat toooo!'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 39, 20, 728758, tzinfo=datetime.timezone.utc), 'rating': 3, 'title': 'Mashine War', 'text': 'hahaha catcha'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 10, 26, 187827, tzinfo=datetime.timezone.utc), 'rating': 4, 'title': 'Cold News  ', 'text': 'Go to the MALL'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 5, 36, 964698, tzinfo=datetime.timezone.utc), 'rating': 26, 'title': '', 'text': ''}]>
>>> Post.objects.all().order_by('-rating').values('author', 'date_Creation', 'rating', 'title', 'text')
<QuerySet [{'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 5, 36, 964698, tzinfo=datetime.timezone.utc), 'rating': 26, 'title': '', 'text': ''}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 10, 26, 187827, tzinfo=datetime.timezone.utc), 'rating': 4, 'title': 'Cold News  ', 'text': 'Go to the MALL'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 39, 20, 728758, tzinfo=datetime.timezone.utc), 'rating': 3, 'title': 'Mashine War', 'text': 'hahaha catcha'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 14, 452861, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Oil trash', 'text': 'Oil ompany on fire'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 43, 0, 518466, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Monkey on Moon', 'text': 'Rat toooo!'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 58, 474230, tzinfo=datetime.timezone.utc), 'rating': -1, 'title': 'Misha sleep', 'text': 'Masha wake up!!!!'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 9, 33, 595364, tzinfo=datetime.timezone.utc), 'rating': -5, 'title': 'Hot News', 'text': 'Brai "wait for it, wait for it" kin news'}]>
>>> best1 = Post.objects.all().order_by('-rating').values('author', 'date_Creation', 'rating', 'title', 'text')
>>> print(best[0])
{'author': 1}
>>> print(best1[0])
{'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 5, 36, 964698, tzinfo=datetime.timezone.utc), 'rating': 26, 'title': '', 'text': ''}
>>> best2 = Comment.objects.all().order_by('comment_Post').values()
>>> print(best2)
<QuerySet [{'id': 1, 'comment_Post_id': 1, 'comment_User_id': 1, 'text': 'comment text NIk', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 52, 58, 339961, tzinfo=datetime.timezone.utc), 'rating': 7}, {'id': 2, 'comment_Post_id': 2, 'comment_User_id': 2, 'text': 'comment text Biears', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 54, 32, 845421, tzinfo=datetime.timezone.utc), 'rating': -1}, {'id': 3, 'comment_Post_id': 3, 'comment_User_id': 2, 'text': 'comment text Biears', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 54, 44, 778497, tzinfo=datetime.timezone.utc), 'rating': 2}, {'id': 4, 'comment_Post_id': 3, 'comment_User_id': 1, 'text': 'comment text Biears to Nik', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 54, 58, 733209, tzinfo=datetime.timezone.utc), 'rating': 0}, {'id': 5, 'comment_Post_id': 4, 'comment_User_id': 1, 'text': 'comment text NIk to Biear', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 55, 20, 759349, tzinfo=datetime.timezone.utc), 'rating': 4}, {'id': 6, 'comment_Post_id': 4, 'comment_User_id': 2, 'text': 'comment text NIk to Biear', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 55, 31, 695125, tzinfo=datetime.timezone.utc), 'rating': 1}, {'id': 7, 'comment_Post_id': 5, 'comment_User_id': 2, 'text': 'comment text NIk to Biear', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 55, 41, 835030, tzinfo=datetime.timezone.utc), 'rating': 1}, {'id': 8, 'comment_Post_id': 5, 'comment_User_id': 1, 'text': 'comment text Biear to NIk', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 56, 0, 256803, tzinfo=datetime.timezone.utc), 'rating': -4}, {'id': 9, 'comment_Post_id': 6, 'comment_User_id': 1, 'text': 'comment text Biear to NIk', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 56, 9, 791363, tzinfo=datetime.timezone.utc), 'rating': -1}, {'id': 10, 'comment_Post_id': 6, 'comment_User_id': 2, 'text': 'comment text NIk to Biear', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 56, 29, 515617, tzinfo=datetime.timezone.utc), 'rating': 1}, {'id': 11, 'comment_Post_id': 7, 'comment_User_id': 2, 'text': 'comment text NIk to Biear', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 56, 40, 604988, tzinfo=datetime.timezone.utc), 'rating': 2}, {'id': 12, 'comment_Post_id': 7, 'comment_User_id': 1, 'text': 'comment text Biear to NIk', 'date_Of_Create': datetime.datetime(2022, 10, 25, 20, 57, 4, 731512, tzinfo=datetime.timezone.utc), 'rating': 3}]>
>>> print(best1)
<QuerySet [{'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 5, 36, 964698, tzinfo=datetime.timezone.utc), 'rating': 26, 'title': '', 'text': ''}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 10, 26, 187827, tzinfo=datetime.timezone.utc), 'rating': 4, 'title': 'Cold News  ', 'text': 'Go to the MALL'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 39, 20, 728758, tzinfo=datetime.timezone.utc), 'rating': 3, 'title': 'Mashine War', 'text': 'hahaha catcha'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 14, 452861, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Oil trash', 'text': 'Oil ompany on fire'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 43, 0, 518466, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Monkey on Moon', 'text': 'Rat toooo!'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 58, 474230, tzinfo=datetime.timezone.utc), 'rating': -1, 'title': 'Misha sleep', 'text': 'Masha wake up!!!!'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 9, 33, 595364, tzinfo=datetime.timezone.utc), 'rating': -5, 'title': 'Hot News', 'text': 'Brai "wait for it, wait for it" kin news'}]>
>>> Post.objects.filter(rating = 20).order_by('-rating').values('author', 'date_Creation', 'rating', 'title', 'text')
<QuerySet []>
>>> Post.objects.filter(rating = 20).order_by('rating').values('author', 'date_Creation', 'rating', 'title', 'text')
<QuerySet []>
>>> Post.objects.all().order_by('rating').values('author', 'date_Creation', 'rating', 'title', 'text')
<QuerySet [{'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 9, 33, 595364, tzinfo=datetime.timezone.utc), 'rating': -5, 'title': 'Hot News', 'text': 'Brai "wait for it, wait for it" kin news'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 58, 474230, tzinfo=datetime.timezone.utc), 'rating': -1, 'title': 'Misha sleep', 'text': 'Masha wake up!!!!'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 41, 14, 452861, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Oil trash', 'text': 'Oil ompany on fire'}, {'author': 2, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 43, 0, 518466, tzinfo=datetime.timezone.utc), 'rating': 1, 'title': 'Monkey on Moon', 'text': 'Rat toooo!'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 39, 20, 728758, tzinfo=datetime.timezone.utc), 'rating': 3, 'title': 'Mashine War', 'text': 'hahaha catcha'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 10, 26, 187827, tzinfo=datetime.timezone.utc), 'rating': 4, 'title': 'Cold News  ', 'text': 'Go to the MALL'}, {'author': 1, 'date_Creation': datetime.datetime(2022, 10, 25, 20, 5, 36, 964698, tzinfo=datetime.timezone.utc), 'rating': 26, 'title': '', 'text': ''}]>
>>> best3 = Comment.objects.get(comment_Post=Post.objects.get(rating=26))
>>> print(best3)
Comment object (1)
>>> print(best3.text)
comment text NIk
>>> print(best3.rating)
7
>>> print(best3.date_Of_Create)
2022-10-25 20:52:58.339961+00:00
>>> best3 = Comment.objects.all().get(comment_Post=Post.objects.get(rating=26))
>>> print(best3)
Comment object (1)
>>> best3 = Comment.objects.all().filter(rating=7)
>>> print(best3)
<QuerySet [<Comment: Comment object (1)>]>
>>> print(best3)
<QuerySet [<Comment: Comment object (1)>]>
>>> best3 = Comment.objects.all().filter(comment_User=User.objects.get(username='Nik'))
>>> print(best3)
<QuerySet [<Comment: Comment object (1)>, <Comment: Comment object (4)>, <Comment: Comment object (5)>, <Comment: Comment object (8)>, <Comment: Comment object (9)>, <Comment: Comment object (12)>]>
>>> best3 = Comment.objects.all().filter(comment_Post=Post.objects.get(rating=26))
>>> print(best3)
<QuerySet [<Comment: Comment object (1)>]>
>>> best3 = Comment.objects.all().filter(comment_Post=Post.objects.get(rating=4))
>>> print(best3)
<QuerySet [<Comment: Comment object (3)>, <Comment: Comment object (4)>]>
>>> Post.objects.get(author=Author.objects.get(author=User.objects.get(username='Nik'))